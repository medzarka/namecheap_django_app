"""
Django settings for namecheap_django_app project.

Generated by 'django-admin startproject' using Django 4.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

#####
import os.path
import sys
from pathlib import Path
import environ

from namecheap_django_app.tools import createDir
from namecheap_django_app.tools import FileLogger

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

if 'env_file' in os.environ.keys():
    env_file = os.path.join(BASE_DIR, 'env', os.getenv('env_file'))
    print(f'Configuration Site in file {env_file}.')
else:
    env_file = 'env'
    env_file = os.path.join(BASE_DIR, 'env', 'env')
    print(f'Configuration Site in file {env_file}.')

if env_file is None:
    print(f'The env filename "env_file" is not set !')
    sys.exit(-1)

if not os.path.exists(os.path.join(BASE_DIR, env_file)):
    print(f'The env filename {env_file} does not exist!')
    sys.exit(-1)

env = environ.Env()
env.read_env(os.path.join(BASE_DIR, env_file))

SITE_DATA_DIR = os.path.join(os.environ['HOME'], env('SITE_DATA_PATH'))
SITE_MEDIA_DIR = os.path.join(os.environ['HOME'], env('SITE_MEDIA_PATH'))
SITE_MEDIA_STATIC_DIR = os.path.join(SITE_MEDIA_DIR, 'static')
SITE_MEDIA_MEDIA_DIR = os.path.join(SITE_MEDIA_DIR, 'media')
SITE_LOG_DIR = os.path.join(SITE_DATA_DIR, 'logs')
SITE_DB_DIR = os.path.join(SITE_DATA_DIR, 'database')
createDir(SITE_DATA_DIR)
createDir(SITE_MEDIA_DIR)
createDir(SITE_MEDIA_STATIC_DIR)
createDir(SITE_MEDIA_MEDIA_DIR)
createDir(SITE_LOG_DIR)
createDir(SITE_DB_DIR)

_fileLogger = FileLogger(os.path.join(SITE_LOG_DIR, 'trace.txt'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/
_fileLogger.debug(f'#########################################.')
_fileLogger.debug(f'#######  The django app started.')

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str('SECRET_KEY')
_fileLogger.debug(f'The secret is {SECRET_KEY}')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG')
_fileLogger.debug(f'The debug mode is set to {DEBUG}')

ALLOWED_HOSTS = ['localhost', '127.0.0.1', env.str('SITE_URL')]
_fileLogger.debug(f'The site url is set to {ALLOWED_HOSTS}')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'web',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'namecheap_django_app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'namecheap_django_app.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
DEVELOPMENT_MODE = env.bool('DEVELOPMENT_MODE', default=False)

if DEVELOPMENT_MODE is True:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(SITE_DB_DIR, 'db.sqlite3'),
        },
    }
elif len(sys.argv) > 0 and sys.argv[1] != 'collectstatic':
    if os.getenv("DATABASE_URL", None) is None:
        raise Exception("DATABASE_URL environment variable not defined")
    DATABASES = {
        'default': env.db(),
    }

_fileLogger.debug(f'The database url is set to {DATABASES}')

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = env.str('TIME_ZONE', default='Asia/Riyadh')
_fileLogger.debug(f'The timezone is set to {TIME_ZONE}')
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/


STATIC_URL = '/static/'
STATIC_ROOT = SITE_MEDIA_STATIC_DIR
STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'),)
_fileLogger.debug(f'The static files are served from {SITE_MEDIA_STATIC_DIR}')
MEDIA_ROOT = SITE_MEDIA_MEDIA_DIR
MEDIA_URL = '/media/'
_fileLogger.debug(f'The media files are served from {SITE_MEDIA_MEDIA_DIR}')

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOG_FILE = os.path.join(SITE_LOG_DIR, 'trace.log')
_fileLogger.debug(f'The log file is stored in {LOG_FILE}')

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": LOG_FILE,
        },
    },
    "loggers": {
        "django": {
            "handlers": ["file"],
            "level": "DEBUG",
            "propagate": True,
        },
    },
}
